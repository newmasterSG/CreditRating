// <auto-generated />
using CreditingRating.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CreditingRating.Migrations
{
    [DbContext(typeof(BankingContext))]
    [Migration("20230225214516_DBwithDoubleRating")]
    partial class DBwithDoubleRating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreditingRating.Model.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("CreditingRating.Model.BankClient", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bank_client_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("client_rating");

                    b.HasKey("ClientId", "BankId");

                    b.HasIndex("BankId");

                    b.ToTable("BankClients");
                });

            modelBuilder.Entity("CreditingRating.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("credit_histoy_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<double>("Salary")
                        .HasColumnType("float")
                        .HasColumnName("client_salary");

                    b.HasKey("Id");

                    b.HasIndex("CreditHistoryId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("client");
                });

            modelBuilder.Entity("CreditingRating.Model.CreditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("credit_histoy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditHistoryLength")
                        .HasColumnType("int")
                        .HasColumnName("client_age");

                    b.Property<double>("CreditUtilization")
                        .HasColumnType("float")
                        .HasColumnName("client_credit_utilization");

                    b.Property<string>("PaymentHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("recentInquiries")
                        .HasColumnType("int")
                        .HasColumnName("client_credit_recent_inquiries");

                    b.HasKey("Id");

                    b.ToTable("credit_history");
                });

            modelBuilder.Entity("CreditingRating.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("person_age");

                    b.Property<string>("Birthday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("person_birthday");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("person_gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("person_name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("person_surname");

                    b.HasKey("Id");

                    b.ToTable("customer_contact");
                });

            modelBuilder.Entity("CreditingRating.Model.BankClient", b =>
                {
                    b.HasOne("CreditingRating.Model.Bank", "Bank")
                        .WithMany("BankClients")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditingRating.Model.Client", "Client")
                        .WithMany("ClientBanks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CreditingRating.Model.Client", b =>
                {
                    b.HasOne("CreditingRating.Model.CreditHistory", "CreditHistory")
                        .WithMany()
                        .HasForeignKey("CreditHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditingRating.Model.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("CreditingRating.Model.Client", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditHistory");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CreditingRating.Model.Bank", b =>
                {
                    b.Navigation("BankClients");
                });

            modelBuilder.Entity("CreditingRating.Model.Client", b =>
                {
                    b.Navigation("ClientBanks");
                });

            modelBuilder.Entity("CreditingRating.Model.Person", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
